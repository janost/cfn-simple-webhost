---
- hosts: all
  vars:
    aws_region: "{{ aws_region }}"
  become: yes
  tasks:
  - name: Get distro codename
    shell: lsb_release -cs
    register: distro
  - name: Import repo signing keys
    apt_key:
      url: "{{ item }}"
      state: present
    loop:
      - https://nginx.org/keys/nginx_signing.key
      - https://download.docker.com/linux/ubuntu/gpg
      - https://repos.influxdata.com/influxdb.key
  - name: Add repositories to apt
    apt_repository:
      repo: "{{ item }}"
      state: present
      update_cache: no
    loop:
      - "deb [arch=amd64] http://nginx.org/packages/ubuntu {{ distro.stdout }} nginx"
      - "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ distro.stdout }} stable"
      - "deb https://repos.influxdata.com/ubuntu/ {{ distro.stdout }} stable"
      - "ppa:costamagnagianfranco/borgbackup"
      - "ppa:certbot/certbot"
      - "deb http://archive.ubuntu.com/ubuntu/ {{ distro.stdout }} universe"
      - "deb http://archive.ubuntu.com/ubuntu/ {{ distro.stdout }}-updates universe"
      - "deb http://security.ubuntu.com/ubuntu/ {{ distro.stdout }}-security universe"
  - name: Upgrade all packages to the latest version
    apt:
      update_cache: yes
      upgrade: dist
  - name: Install packages
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - curl
      - gnupg2
      - ca-certificates
      - lsb-release
      - libgc1c2
      - libyaml-dev
      - nginx
      - git
      - wget
      - jq
      - haveged
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - mariadb-client
      - python-setuptools
      - python-pip
      - borgbackup
      - telegraf
      - pwgen
      - php7.2-cli
      - php7.2-gd
      - php7.2-xml
      - php7.2-mbstring
      - php7.2-curl
      - nvme-cli
      - tmux
      - mc
      - certbot
      - python-certbot-nginx
  - name: Download bitwarden-cli
    get_url:
      url: "https://vault.bitwarden.com/download/?app=cli&platform=linux"
      dest: "/tmp/bw-cli.zip"
      mode: 0644
      force: yes
  - name: Install bitwarden-cli
    unarchive:
      src: "/tmp/bw-cli.zip"
      remote_src: yes
      dest: /usr/local/bin
  - name: Set bitwarden-cli permissions
    file:
      path: /usr/local/bin/bw
      owner: root
      group: root
      mode: 0755
  - name: Install docker-compose
    get_url:
      url: "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64"
      dest: "/usr/local/bin/docker-compose"
      mode: 0755
      force: yes
  - name: Calculate sha256 of docker-compose
    stat:
      path: "/usr/local/bin/docker-compose"
      checksum_algorithm: sha256
    register: dcst
  - name: "Fail on docker-compose checksum mismatch"
    fail:
      msg: "Docker-compose sha256 checksum doesn't match!"
    when: dcst.stat.checksum != 'bee6460f96339d5d978bb63d17943f773e1a140242dfa6c941d5e020a302c91b'
  - name: Clean apt cache
    shell: apt-get clean
  - name: Deploy systemd services.
    copy:
      src: "{{ item }}"
      dest: /etc/systemd/system/
      owner: root
      mode: 0644
    with_fileglob:
      - files/etc/systemd/system/*
  - name: Install Amazon EBS tools
    copy:
      src: "{{ item }}"
      dest: /sbin/
      owner: root
      mode: 0755
    with_fileglob:
      - files/sbin/*
  - name: Install udev rule for EBS volumes
    copy:
      src: files/etc/udev/rules.d/70-ec2-nvme-devices.rules
      dest: /etc/udev/rules.d/70-ec2-nvme-devices.rules
      owner: root
      mode: 0644
  - name: Enable docker-cleanup timer
    systemd:
      name: docker-cleanup.timer
      state: started
      enabled: yes
      daemon_reload: yes
  - name: Deploy new nginx configuration
    copy:
      src: files/etc/nginx/nginx.conf
      dest: /etc/nginx/nginx.conf
      owner: root
      group: root
      mode: 0644
  - name: Delete default nginx site configs
    shell: rm /etc/nginx/conf.d/*
  - name: Install nginx default site config
    copy:
      src: files/etc/nginx/conf.d/zzz_default.conf
      dest: /etc/nginx/conf.d/zzz_default.conf
      owner: root
      group: root
      mode: 0644
  - name: Set up docker web network
    shell: "docker network create -d bridge --subnet=172.28.0.0/16 --gateway=172.28.0.1 -o \"com.docker.network.bridge.enable_ip_masquerade=true\" -o \"com.docker.network.bridge.enable_icc=true\" -o \"com.docker.network.bridge.host_binding_ipv4=127.0.0.1\" -o \"com.docker.network.bridge.name=dweb0\" -o \"com.docker.network.driver.mtu=1500\" web"
  - name: Fix ubuntu's libpcre madness
    file:
      src: "libpcre.so.3"
      dest: "/lib/x86_64-linux-gnu/libpcre.so.1"
      state: link
  - name: Ensure group 'web'
    group:
      name: web
      state: present
  - name: Create group 'ssh-users'
    group:
      name: ssh-users
      state: present
  - name: Add the user 'web'
    user:
      name: web
      shell: /usr/sbin/nologin
      groups: web,docker
      append: yes
      state: present
  - name: Add ubuntu user to ssh-users
    user:
      name: ubuntu
      append: yes
      groups: ssh-users
      state: present
      shell: /bin/bash
  - name: Add telegraf to docker group
    user:
      name: telegraf
      groups: docker
      append: yes
  - name: Enable haveged service
    systemd:
      name: haveged
      enabled: yes
      state: started
  - name: Create directory for cfn-init
    file:
      path: /opt/aws/bin
      state: directory
  - name: Create directory for cfn configs
    file:
      path: /etc/cfn/hooks.d
      state: directory
  - name: Install cfn-init
    shell: python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
  - name: Create mountpoint for data disk
    file:
      path: /data
      state: directory
  - name: Install modified fstab
    copy:
      src: files/etc/fstab
      dest: /etc/fstab
      owner: root
      group: root
      mode: 0644
  - name: Load required modules on boot
    copy:
      src: files/etc/modules-load.d/tcp-bbr-fq.conf
      dest: /etc/modules-load.d/tcp-bbr-fq.configuration
      owner: root
      mode: 0644
  - name: Install sysctl configs
    copy:
      src: "{{ item }}"
      dest: /etc/sysctl.d/
      owner: root
      mode: 0644
    with_fileglob:
      - files/etc/sysctl.d/*
  - name: Copy awslogs agent base configuration
    copy:
      src: files/awslogs.conf
      dest: /tmp/awslogs.conf
      owner: root
      group: root
      mode: 0644
  - name: Download awslogs agent
    get_url:
      url: "https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py"
      dest: "/tmp/awslogs-agent-setup.py"
      mode: 0755
      force: yes
  - name: Install awslogs agent
    shell: "python /tmp/awslogs-agent-setup.py --region {{ aws_region }} --non-interactive -c /tmp/awslogs.conf"
  - name: Deploy sshd configuration
    template:
      src: files/etc/ssh/sshd_config
      dest: /etc/ssh/sshd_config
      owner: root
      mode: 0644
